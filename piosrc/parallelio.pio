.program parallelio

again:
    mov y, x
    mov isr, osr

loop:
    in pins, 24
    mov x, isr
    jmp X!=Y output
    jmp again

output:
    push block
    irq set 0

% c-sdk {
static inline void parallelio_program_init(PIO pio, uint sm, uint offset, uint pin_start) {

    pio_sm_set_consecutive_pindirs(pio, sm, pin_start, 24, false);
    pio_sm_config c = parallelio_program_get_default_config(offset);
    // Shift to right, autopush enabled
    sm_config_set_in_shift(&c, false, false, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (16 * 1000000);
    sm_config_set_clkdiv(&c, div);

    // Clear IRQ flag before starting
    hw_clear_bits(&pio->inte0, 1u << sm);
    hw_clear_bits(&pio->inte1, 1u << sm);
    pio->irq = 1u << sm;
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint32_t parallelio_program_getc(PIO pio, uint sm) {
    io_rw_32 *rxfifo_shift = (io_rw_32*)&pio->rxf[sm];
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (uint32_t)*rxfifo_shift;
}

%}